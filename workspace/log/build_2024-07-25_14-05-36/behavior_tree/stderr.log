[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kvirtual bool FallbackNode::tick(bool, int)[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:39:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
   39 |     for(int i = 0; [01;35m[Ki < children.size()[m[K; i++)
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:44:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
   44 |     for(int i = 0; [01;35m[Ki < children.size()[m[K; i++){
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kvirtual bool SequenceNode::tick(bool, int)[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:75:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
   75 |     for(int i = 0; [01;35m[Ki < children.size()[m[K; i++)
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:81:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
   81 |     for(int i = 0; [01;35m[Ki < children.size()[m[K; i++){
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kvirtual bool ParallelNode::tick(bool, int)[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:114:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  114 |     for(int i = 0; [01;35m[Ki < children.size()[m[K; i++)
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:120:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  120 |     for(int i = 0; [01;35m[Ki < children.size()[m[K; i++){
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:132:33:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  132 |     else if([01;35m[Kchild_failure_count >= (children.size() - child_success_threshold + 1)[m[K)
      |             [01;35m[K~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kvirtual bool ConditionNode::tick(bool, int)[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:187:8:[m[K [01;35m[Kwarning: [m[Kunused variable â€˜[01m[Kchild_changed[m[Kâ€™ [[01;35m[K-Wunused-variable[m[K]
  187 |   bool [01;35m[Kchild_changed[m[K = false;
      |        [01;35m[K^~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kvoid ActionNode::callback(behavior_tree_msgs::msg::Status_<std::allocator<void> >::SharedPtr)[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:326:16:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kbehavior_tree_msgs::msg::Status_<std::allocator<void> >::_id_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} and â€˜[01m[Kint[m[Kâ€™ [[01;35m[K-Wsign-compare[m[K]
  326 |     if([01;35m[Kmsg->id != current_id[m[K){
      |        [01;35m[K~~~~~~~~^~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In constructor â€˜[01m[KBehaviorTree::BehaviorTree(std::string, rclcpp::Node*)[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:418:20:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  418 |   for(int i = 0; [01;35m[Ki < nodes.size()[m[K; i++){
      |                  [01;35m[K~~^~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kint BehaviorTree::count_tabs(std::string)[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:514:20:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::__cxx11::basic_string<char>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  514 |   for(int i = 0; [01;35m[Ki < str.size()[m[K; i++)
      |                  [01;35m[K~~^~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kbool BehaviorTree::tick()[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:583:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  583 |     for(int i = 0; [01;35m[Ki < nodes.size()[m[K; i++){
      |                    [01;35m[K~~^~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:[m[K In member function â€˜[01m[Kstd::string BehaviorTree::get_graphviz()[m[Kâ€™:
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:672:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  672 |     for(int i = 0; [01;35m[Ki < node->children.size()[m[K; i++)
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:683:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<Node*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
  683 |     for(int i = 0; [01;35m[Ki < node->children.size()[m[K; i++){
      |                    [01;35m[K~~^~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/workspace/src/behavior_tree/include/behavior_tree/behavior_tree_implementation.h:11[m[K,
                 from [01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:1[m[K:
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (ConditionNode::*(ConditionNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Bool_<std::allocator<void> > >)>; MessageT = std_msgs::msg::Bool_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::Bool_<std::allocator<void> >; CallbackT = std::_Bind<void (ConditionNode::*(ConditionNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Bool_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Bool_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::Bool_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Bool_<std::allocator<void> >; CallbackT = std::_Bind<void (ConditionNode::*(ConditionNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Bool_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Bool_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::Bool_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Bool_<std::allocator<void> >; CallbackT = std::_Bind<void (ConditionNode::*(ConditionNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Bool_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Bool_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::Bool_<std::allocator<void> >; CallbackT = std::_Bind<void (ConditionNode::*(ConditionNode*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::Bool_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::Bool_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::Bool_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:229:62:[m[K   required from here
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:21:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set_deprecated(std::function<void(std::shared_ptr<_Yp>)>) [with SetT = std_msgs::msg::Bool_<std::allocator<void> >; MessageT = std_msgs::msg::Bool_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™ is deprecated: use 'void(std::shared_ptr<const MessageT>)' instead [[01;35m[K-Wdeprecated-declarations[m[K]
  391 |       [01;35m[Kset_deprecated(static_cast<typename scbth::callback_type>(callback))[m[K;
      |       [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:408:3:[m[K [01;36m[Knote: [m[Kdeclared here
  408 |   [01;36m[Kset_deprecated[m[K(std::function<void(std::shared_ptr<SetT>)> callback)
      |   [01;36m[K^~~~~~~~~~~~~~[m[K
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (ActionNode::*(ActionNode*, std::_Placeholder<1>))(std::shared_ptr<behavior_tree_msgs::msg::Status_<std::allocator<void> > >)>; MessageT = behavior_tree_msgs::msg::Status_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = behavior_tree_msgs::msg::Status_<std::allocator<void> >; CallbackT = std::_Bind<void (ActionNode::*(ActionNode*, std::_Placeholder<1>))(std::shared_ptr<behavior_tree_msgs::msg::Status_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<behavior_tree_msgs::msg::Status_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = behavior_tree_msgs::msg::Status_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = behavior_tree_msgs::msg::Status_<std::allocator<void> >; CallbackT = std::_Bind<void (ActionNode::*(ActionNode*, std::_Placeholder<1>))(std::shared_ptr<behavior_tree_msgs::msg::Status_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<behavior_tree_msgs::msg::Status_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = behavior_tree_msgs::msg::Status_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = behavior_tree_msgs::msg::Status_<std::allocator<void> >; CallbackT = std::_Bind<void (ActionNode::*(ActionNode*, std::_Placeholder<1>))(std::shared_ptr<behavior_tree_msgs::msg::Status_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<behavior_tree_msgs::msg::Status_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = behavior_tree_msgs::msg::Status_<std::allocator<void> >; CallbackT = std::_Bind<void (ActionNode::*(ActionNode*, std::_Placeholder<1>))(std::shared_ptr<behavior_tree_msgs::msg::Status_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<behavior_tree_msgs::msg::Status_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<behavior_tree_msgs::msg::Status_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/workspace/src/behavior_tree/src/behavior_tree_implementation.cpp:318:74:[m[K   required from here
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:21:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set_deprecated(std::function<void(std::shared_ptr<_Yp>)>) [with SetT = behavior_tree_msgs::msg::Status_<std::allocator<void> >; MessageT = behavior_tree_msgs::msg::Status_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™ is deprecated: use 'void(std::shared_ptr<const MessageT>)' instead [[01;35m[K-Wdeprecated-declarations[m[K]
  391 |       [01;35m[Kset_deprecated(static_cast<typename scbth::callback_type>(callback))[m[K;
      |       [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:408:3:[m[K [01;36m[Knote: [m[Kdeclared here
  408 |   [01;36m[Kset_deprecated[m[K(std::function<void(std::shared_ptr<SetT>)> callback)
      |   [01;36m[K^~~~~~~~~~~~~~[m[K
